export const dsaQuestions = [
  {
    id: 'dsa-001',
    title: 'Explain the time and space complexity of common sorting algorithms',
    description: 'Compare the efficiency of algorithms like QuickSort, MergeSort, HeapSort, and BubbleSort in terms of time and space complexity.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['algorithms', 'sorting', 'time-complexity', 'space-complexity', 'big-o-notation', 'quicksort', 'mergesort', 'heapsort', 'bubblesort', 'efficiency', 'performance', 'comparison'],
  },
  {
    id: 'dsa-002',
    title: 'Implement a function to reverse a linked list',
    description: 'Write code to reverse a singly linked list. Discuss both iterative and recursive approaches.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['data-structures', 'linked-list', 'recursion', 'iteration', 'pointers', 'memory-management', 'algorithm-implementation', 'coding-challenge', 'interview-question'],
  },
  {
    id: 'dsa-003',
    title: 'How would you detect a cycle in a linked list?',
    description: 'Explain the algorithm to determine if a linked list contains a cycle, and implement a solution with optimal time and space complexity.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['data-structures', 'linked-list', 'cycle-detection', 'two-pointer', 'floyd-algorithm', 'tortoise-hare', 'algorithm-implementation', 'space-optimization'],
  },
  {
    id: 'dsa-004',
    title: 'Implement a binary search tree with basic operations',
    description: 'Design a binary search tree class with methods for insertion, deletion, and searching. Discuss the time complexity of each operation.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['data-structures', 'binary-search-tree', 'tree-traversal', 'recursion', 'insertion', 'deletion', 'search', 'balanced-trees', 'algorithm-implementation'],
  },
  {
    id: 'dsa-005',
    title: 'Solve the "Two Sum" problem',
    description: 'Given an array of integers and a target sum, return the indices of two numbers that add up to the target. Discuss the most efficient approach.',
    category: 'technical' as const,
    difficulty: 'easy' as const,
    tags: ['arrays', 'hash-tables', 'two-pointer', 'algorithm-implementation', 'time-complexity', 'space-complexity', 'leetcode', 'coding-challenge'],
  },
  {
    id: 'dsa-006',
    title: 'Explain dynamic programming and solve a classic problem',
    description: 'Define dynamic programming and solve either the Fibonacci sequence, knapsack problem, or longest common subsequence using this approach.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['dynamic-programming', 'memoization', 'tabulation', 'optimization', 'recursion', 'fibonacci', 'knapsack', 'lcs', 'algorithm-design', 'subproblems'],
  },
  {
    id: 'dsa-007',
    title: 'Implement a graph and perform BFS and DFS traversals',
    description: 'Create a graph data structure and implement both breadth-first search and depth-first search algorithms. Compare their applications and complexities.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['data-structures', 'graphs', 'bfs', 'dfs', 'traversal', 'adjacency-list', 'adjacency-matrix', 'algorithm-implementation', 'search-algorithms'],
  },
  {
    id: 'dsa-008',
    title: 'Design an LRU Cache',
    description: 'Implement a Least Recently Used (LRU) cache with O(1) time complexity for both get and put operations.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['data-structures', 'cache', 'lru', 'hash-map', 'linked-list', 'system-design', 'algorithm-implementation', 'time-complexity', 'memory-management'],
  },
  {
    id: 'dsa-009',
    title: 'Solve the "Valid Parentheses" problem',
    description: 'Write a function to determine if a string containing only parentheses characters (\'(\', \')\', \'{\', \'}\', \'[\', \']\') is valid. Discuss your approach.',
    category: 'technical' as const,
    difficulty: 'easy' as const,
    tags: ['strings', 'stacks', 'algorithm-implementation', 'validation', 'data-structures', 'leetcode', 'coding-challenge', 'interview-question'],
  },
  {
    id: 'dsa-010',
    title: 'Implement a trie (prefix tree) data structure',
    description: 'Design and implement a trie data structure for efficient string operations like insertion, search, and prefix matching.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['data-structures', 'trie', 'prefix-tree', 'strings', 'search', 'autocomplete', 'algorithm-implementation', 'space-optimization', 'time-complexity'],
  },
];