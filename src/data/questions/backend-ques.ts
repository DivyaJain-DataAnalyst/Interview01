export const backendQuestions = [
  {
    id: 'be-001',
    title: 'Explain the difference between SQL and NoSQL databases',
    description: 'Compare SQL and NoSQL databases, including their use cases, advantages, and disadvantages.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['databases', 'sql', 'nosql', 'data-modeling', 'relational', 'document-store', 'key-value', 'graph-database', 'acid-properties', 'cap-theorem', 'consistency', 'availability', 'partition-tolerance', 'scaling'],
  },
  {
    id: 'be-002',
    title: 'What is RESTful API design and its principles?',
    description: 'Explain REST architecture principles and best practices for designing RESTful APIs.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['rest', 'api', 'http', 'web-services', 'stateless', 'resource-based', 'http-methods', 'status-codes', 'json', 'xml', 'versioning', 'pagination', 'filtering', 'documentation'],
  },
  {
    id: 'be-003',
    title: 'How do you handle authentication and authorization?',
    description: 'Discuss different authentication methods and authorization strategies for securing web applications.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['authentication', 'authorization', 'jwt', 'oauth', 'security', 'session-management', 'cookies', 'tokens', 'rbac', 'abac', 'multi-factor-auth', 'password-hashing', 'bcrypt', 'salt'],
  },
  {
    id: 'be-004',
    title: 'Explain microservices architecture',
    description: 'Describe microservices architecture, its benefits, challenges, and when to use it over monolithic architecture.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['microservices', 'architecture', 'distributed-systems', 'scalability', 'service-discovery', 'api-gateway', 'circuit-breaker', 'event-driven', 'saga-pattern', 'containerization', 'orchestration', 'monitoring'],
  },
  {
    id: 'be-005',
    title: 'How do you optimize database performance?',
    description: 'Discuss various techniques for improving database query performance and overall database optimization.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['database', 'performance', 'indexing', 'query-optimization', 'execution-plans', 'normalization', 'denormalization', 'partitioning', 'sharding', 'connection-pooling', 'caching', 'profiling'],
  },
  {
    id: 'be-006',
    title: 'What is caching and how do you implement it?',
    description: 'Explain different types of caching strategies and their implementation in web applications.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['caching', 'redis', 'memcached', 'performance', 'cache-strategies', 'cache-aside', 'write-through', 'write-behind', 'ttl', 'cache-invalidation', 'cdn', 'browser-cache'],
  },
  {
    id: 'be-007',
    title: 'How do you handle error handling and logging?',
    description: 'Discuss best practices for error handling, logging, and monitoring in backend applications.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['error-handling', 'logging', 'monitoring', 'debugging', 'exception-handling', 'try-catch', 'log-levels', 'structured-logging', 'alerting', 'metrics', 'tracing', 'observability'],
  },
  {
    id: 'be-008',
    title: 'Explain load balancing and its types',
    description: 'Describe load balancing concepts, different algorithms, and implementation strategies.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['load-balancing', 'scalability', 'high-availability', 'infrastructure', 'round-robin', 'least-connections', 'weighted', 'health-checks', 'sticky-sessions', 'layer-4', 'layer-7', 'reverse-proxy'],
  },
  {
    id: 'be-009',
    title: 'What is message queuing and when would you use it?',
    description: 'Explain message queue systems, their benefits, and use cases in distributed applications.',
    category: 'technical' as const,
    difficulty: 'medium' as const,
    tags: ['message-queues', 'async-processing', 'rabbitmq', 'kafka', 'pub-sub', 'producer-consumer', 'dead-letter-queue', 'acknowledgments', 'durability', 'ordering', 'backpressure', 'event-streaming'],
  },
  {
    id: 'be-010',
    title: 'How do you design for scalability?',
    description: 'Discuss strategies and patterns for building scalable backend systems that can handle growth.',
    category: 'technical' as const,
    difficulty: 'hard' as const,
    tags: ['scalability', 'system-design', 'architecture', 'performance', 'horizontal-scaling', 'vertical-scaling', 'stateless-design', 'database-scaling', 'caching-layers', 'cdn', 'auto-scaling', 'capacity-planning'],
  },
];